// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package ssd.testing_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.Relational;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: testing Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class testing implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "testing";
	private final String projectName = "SSD";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					testing.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(testing.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_8_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_11_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row6Struct implements
			routines.system.IPersistableComparableLookupRow<row6Struct> {
		final static byte[] commonByteArrayLock_SSD_testing = new byte[0];
		static byte[] commonByteArray_SSD_testing = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idproveedor;

		public int getIdproveedor() {
			return this.idproveedor;
		}

		public String nombrecompania;

		public String getNombrecompania() {
			return this.nombrecompania;
		}

		public String nombrecontacto;

		public String getNombrecontacto() {
			return this.nombrecontacto;
		}

		public String cargocontacto;

		public String getCargocontacto() {
			return this.cargocontacto;
		}

		public Integer idpais;

		public Integer getIdpais() {
			return this.idpais;
		}

		public Integer idciudad;

		public Integer getIdciudad() {
			return this.idciudad;
		}

		public String direccion;

		public String getDireccion() {
			return this.direccion;
		}

		public String region;

		public String getRegion() {
			return this.region;
		}

		public String codpostal;

		public String getCodpostal() {
			return this.codpostal;
		}

		public String telefono;

		public String getTelefono() {
			return this.telefono;
		}

		public String fax;

		public String getFax() {
			return this.fax;
		}

		public String paginaprincipal;

		public String getPaginaprincipal() {
			return this.paginaprincipal;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idproveedor;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.idproveedor != other.idproveedor)
				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.idproveedor = this.idproveedor;
			other.nombrecompania = this.nombrecompania;
			other.nombrecontacto = this.nombrecontacto;
			other.cargocontacto = this.cargocontacto;
			other.idpais = this.idpais;
			other.idciudad = this.idciudad;
			other.direccion = this.direccion;
			other.region = this.region;
			other.codpostal = this.codpostal;
			other.telefono = this.telefono;
			other.fax = this.fax;
			other.paginaprincipal = this.paginaprincipal;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.idproveedor = this.idproveedor;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSD_testing) {

				try {

					int length = 0;

					this.idproveedor = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idproveedor);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.nombrecompania = readString(dis, ois);

				this.nombrecontacto = readString(dis, ois);

				this.cargocontacto = readString(dis, ois);

				this.idpais = readInteger(dis, ois);

				this.idciudad = readInteger(dis, ois);

				this.direccion = readString(dis, ois);

				this.region = readString(dis, ois);

				this.codpostal = readString(dis, ois);

				this.telefono = readString(dis, ois);

				this.fax = readString(dis, ois);

				this.paginaprincipal = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.nombrecompania, dos, oos);

				writeString(this.nombrecontacto, dos, oos);

				writeString(this.cargocontacto, dos, oos);

				writeInteger(this.idpais, dos, oos);

				writeInteger(this.idciudad, dos, oos);

				writeString(this.direccion, dos, oos);

				writeString(this.region, dos, oos);

				writeString(this.codpostal, dos, oos);

				writeString(this.telefono, dos, oos);

				writeString(this.fax, dos, oos);

				writeString(this.paginaprincipal, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idproveedor=" + String.valueOf(idproveedor));
			sb.append(",nombrecompania=" + nombrecompania);
			sb.append(",nombrecontacto=" + nombrecontacto);
			sb.append(",cargocontacto=" + cargocontacto);
			sb.append(",idpais=" + String.valueOf(idpais));
			sb.append(",idciudad=" + String.valueOf(idciudad));
			sb.append(",direccion=" + direccion);
			sb.append(",region=" + region);
			sb.append(",codpostal=" + codpostal);
			sb.append(",telefono=" + telefono);
			sb.append(",fax=" + fax);
			sb.append(",paginaprincipal=" + paginaprincipal);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idproveedor,
					other.idproveedor);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class provStruct implements
			routines.system.IPersistableRow<provStruct> {
		final static byte[] commonByteArrayLock_SSD_testing = new byte[0];
		static byte[] commonByteArray_SSD_testing = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idproveedor;

		public int getIdproveedor() {
			return this.idproveedor;
		}

		public String nombrecompania;

		public String getNombrecompania() {
			return this.nombrecompania;
		}

		public String nombrecontacto;

		public String getNombrecontacto() {
			return this.nombrecontacto;
		}

		public String cargocontacto;

		public String getCargocontacto() {
			return this.cargocontacto;
		}

		public Integer idpais;

		public Integer getIdpais() {
			return this.idpais;
		}

		public Integer idciudad;

		public Integer getIdciudad() {
			return this.idciudad;
		}

		public String direccion;

		public String getDireccion() {
			return this.direccion;
		}

		public String region;

		public String getRegion() {
			return this.region;
		}

		public String codpostal;

		public String getCodpostal() {
			return this.codpostal;
		}

		public String telefono;

		public String getTelefono() {
			return this.telefono;
		}

		public String fax;

		public String getFax() {
			return this.fax;
		}

		public String paginaprincipal;

		public String getPaginaprincipal() {
			return this.paginaprincipal;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idproveedor;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final provStruct other = (provStruct) obj;

			if (this.idproveedor != other.idproveedor)
				return false;

			return true;
		}

		public void copyDataTo(provStruct other) {

			other.idproveedor = this.idproveedor;
			other.nombrecompania = this.nombrecompania;
			other.nombrecontacto = this.nombrecontacto;
			other.cargocontacto = this.cargocontacto;
			other.idpais = this.idpais;
			other.idciudad = this.idciudad;
			other.direccion = this.direccion;
			other.region = this.region;
			other.codpostal = this.codpostal;
			other.telefono = this.telefono;
			other.fax = this.fax;
			other.paginaprincipal = this.paginaprincipal;

		}

		public void copyKeysDataTo(provStruct other) {

			other.idproveedor = this.idproveedor;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SSD_testing.length) {
					if (length < 1024
							&& commonByteArray_SSD_testing.length == 0) {
						commonByteArray_SSD_testing = new byte[1024];
					} else {
						commonByteArray_SSD_testing = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SSD_testing, 0, length);
				strReturn = new String(commonByteArray_SSD_testing, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSD_testing) {

				try {

					int length = 0;

					this.idproveedor = dis.readInt();

					this.nombrecompania = readString(dis);

					this.nombrecontacto = readString(dis);

					this.cargocontacto = readString(dis);

					this.idpais = readInteger(dis);

					this.idciudad = readInteger(dis);

					this.direccion = readString(dis);

					this.region = readString(dis);

					this.codpostal = readString(dis);

					this.telefono = readString(dis);

					this.fax = readString(dis);

					this.paginaprincipal = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idproveedor);

				// String

				writeString(this.nombrecompania, dos);

				// String

				writeString(this.nombrecontacto, dos);

				// String

				writeString(this.cargocontacto, dos);

				// Integer

				writeInteger(this.idpais, dos);

				// Integer

				writeInteger(this.idciudad, dos);

				// String

				writeString(this.direccion, dos);

				// String

				writeString(this.region, dos);

				// String

				writeString(this.codpostal, dos);

				// String

				writeString(this.telefono, dos);

				// String

				writeString(this.fax, dos);

				// String

				writeString(this.paginaprincipal, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idproveedor=" + String.valueOf(idproveedor));
			sb.append(",nombrecompania=" + nombrecompania);
			sb.append(",nombrecontacto=" + nombrecontacto);
			sb.append(",cargocontacto=" + cargocontacto);
			sb.append(",idpais=" + String.valueOf(idpais));
			sb.append(",idciudad=" + String.valueOf(idciudad));
			sb.append(",direccion=" + direccion);
			sb.append(",region=" + region);
			sb.append(",codpostal=" + codpostal);
			sb.append(",telefono=" + telefono);
			sb.append(",fax=" + fax);
			sb.append(",paginaprincipal=" + paginaprincipal);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(provStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idproveedor,
					other.idproveedor);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_SSD_testing = new byte[0];
		static byte[] commonByteArray_SSD_testing = new byte[0];

		public Integer IDPROVEEDOR;

		public Integer getIDPROVEEDOR() {
			return this.IDPROVEEDOR;
		}

		public String NOMBRECOMPANIA;

		public String getNOMBRECOMPANIA() {
			return this.NOMBRECOMPANIA;
		}

		public String NOMBRECONTACTO;

		public String getNOMBRECONTACTO() {
			return this.NOMBRECONTACTO;
		}

		public String CARGOCONTACTO;

		public String getCARGOCONTACTO() {
			return this.CARGOCONTACTO;
		}

		public String DIRECCION;

		public String getDIRECCION() {
			return this.DIRECCION;
		}

		public String CIUDAD;

		public String getCIUDAD() {
			return this.CIUDAD;
		}

		public String REGION;

		public String getREGION() {
			return this.REGION;
		}

		public String CODPOSTAL;

		public String getCODPOSTAL() {
			return this.CODPOSTAL;
		}

		public String PAIS;

		public String getPAIS() {
			return this.PAIS;
		}

		public String TELEFONO;

		public String getTELEFONO() {
			return this.TELEFONO;
		}

		public String FAX;

		public String getFAX() {
			return this.FAX;
		}

		public String PAGINAPRINCIPAL;

		public String getPAGINAPRINCIPAL() {
			return this.PAGINAPRINCIPAL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SSD_testing.length) {
					if (length < 1024
							&& commonByteArray_SSD_testing.length == 0) {
						commonByteArray_SSD_testing = new byte[1024];
					} else {
						commonByteArray_SSD_testing = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SSD_testing, 0, length);
				strReturn = new String(commonByteArray_SSD_testing, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSD_testing) {

				try {

					int length = 0;

					this.IDPROVEEDOR = readInteger(dis);

					this.NOMBRECOMPANIA = readString(dis);

					this.NOMBRECONTACTO = readString(dis);

					this.CARGOCONTACTO = readString(dis);

					this.DIRECCION = readString(dis);

					this.CIUDAD = readString(dis);

					this.REGION = readString(dis);

					this.CODPOSTAL = readString(dis);

					this.PAIS = readString(dis);

					this.TELEFONO = readString(dis);

					this.FAX = readString(dis);

					this.PAGINAPRINCIPAL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.IDPROVEEDOR, dos);

				// String

				writeString(this.NOMBRECOMPANIA, dos);

				// String

				writeString(this.NOMBRECONTACTO, dos);

				// String

				writeString(this.CARGOCONTACTO, dos);

				// String

				writeString(this.DIRECCION, dos);

				// String

				writeString(this.CIUDAD, dos);

				// String

				writeString(this.REGION, dos);

				// String

				writeString(this.CODPOSTAL, dos);

				// String

				writeString(this.PAIS, dos);

				// String

				writeString(this.TELEFONO, dos);

				// String

				writeString(this.FAX, dos);

				// String

				writeString(this.PAGINAPRINCIPAL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IDPROVEEDOR=" + String.valueOf(IDPROVEEDOR));
			sb.append(",NOMBRECOMPANIA=" + NOMBRECOMPANIA);
			sb.append(",NOMBRECONTACTO=" + NOMBRECONTACTO);
			sb.append(",CARGOCONTACTO=" + CARGOCONTACTO);
			sb.append(",DIRECCION=" + DIRECCION);
			sb.append(",CIUDAD=" + CIUDAD);
			sb.append(",REGION=" + REGION);
			sb.append(",CODPOSTAL=" + CODPOSTAL);
			sb.append(",PAIS=" + PAIS);
			sb.append(",TELEFONO=" + TELEFONO);
			sb.append(",FAX=" + FAX);
			sb.append(",PAGINAPRINCIPAL=" + PAGINAPRINCIPAL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_3Struct implements
			routines.system.IPersistableRow<after_tDBInput_3Struct> {
		final static byte[] commonByteArrayLock_SSD_testing = new byte[0];
		static byte[] commonByteArray_SSD_testing = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer IDPROVEEDOR;

		public Integer getIDPROVEEDOR() {
			return this.IDPROVEEDOR;
		}

		public String NOMBRECOMPANIA;

		public String getNOMBRECOMPANIA() {
			return this.NOMBRECOMPANIA;
		}

		public String NOMBRECONTACTO;

		public String getNOMBRECONTACTO() {
			return this.NOMBRECONTACTO;
		}

		public String CARGOCONTACTO;

		public String getCARGOCONTACTO() {
			return this.CARGOCONTACTO;
		}

		public String DIRECCION;

		public String getDIRECCION() {
			return this.DIRECCION;
		}

		public String CIUDAD;

		public String getCIUDAD() {
			return this.CIUDAD;
		}

		public String REGION;

		public String getREGION() {
			return this.REGION;
		}

		public String CODPOSTAL;

		public String getCODPOSTAL() {
			return this.CODPOSTAL;
		}

		public String PAIS;

		public String getPAIS() {
			return this.PAIS;
		}

		public String TELEFONO;

		public String getTELEFONO() {
			return this.TELEFONO;
		}

		public String FAX;

		public String getFAX() {
			return this.FAX;
		}

		public String PAGINAPRINCIPAL;

		public String getPAGINAPRINCIPAL() {
			return this.PAGINAPRINCIPAL;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.IDPROVEEDOR == null) ? 0 : this.IDPROVEEDOR
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tDBInput_3Struct other = (after_tDBInput_3Struct) obj;

			if (this.IDPROVEEDOR == null) {
				if (other.IDPROVEEDOR != null)
					return false;

			} else if (!this.IDPROVEEDOR.equals(other.IDPROVEEDOR))

				return false;

			return true;
		}

		public void copyDataTo(after_tDBInput_3Struct other) {

			other.IDPROVEEDOR = this.IDPROVEEDOR;
			other.NOMBRECOMPANIA = this.NOMBRECOMPANIA;
			other.NOMBRECONTACTO = this.NOMBRECONTACTO;
			other.CARGOCONTACTO = this.CARGOCONTACTO;
			other.DIRECCION = this.DIRECCION;
			other.CIUDAD = this.CIUDAD;
			other.REGION = this.REGION;
			other.CODPOSTAL = this.CODPOSTAL;
			other.PAIS = this.PAIS;
			other.TELEFONO = this.TELEFONO;
			other.FAX = this.FAX;
			other.PAGINAPRINCIPAL = this.PAGINAPRINCIPAL;

		}

		public void copyKeysDataTo(after_tDBInput_3Struct other) {

			other.IDPROVEEDOR = this.IDPROVEEDOR;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SSD_testing.length) {
					if (length < 1024
							&& commonByteArray_SSD_testing.length == 0) {
						commonByteArray_SSD_testing = new byte[1024];
					} else {
						commonByteArray_SSD_testing = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SSD_testing, 0, length);
				strReturn = new String(commonByteArray_SSD_testing, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSD_testing) {

				try {

					int length = 0;

					this.IDPROVEEDOR = readInteger(dis);

					this.NOMBRECOMPANIA = readString(dis);

					this.NOMBRECONTACTO = readString(dis);

					this.CARGOCONTACTO = readString(dis);

					this.DIRECCION = readString(dis);

					this.CIUDAD = readString(dis);

					this.REGION = readString(dis);

					this.CODPOSTAL = readString(dis);

					this.PAIS = readString(dis);

					this.TELEFONO = readString(dis);

					this.FAX = readString(dis);

					this.PAGINAPRINCIPAL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.IDPROVEEDOR, dos);

				// String

				writeString(this.NOMBRECOMPANIA, dos);

				// String

				writeString(this.NOMBRECONTACTO, dos);

				// String

				writeString(this.CARGOCONTACTO, dos);

				// String

				writeString(this.DIRECCION, dos);

				// String

				writeString(this.CIUDAD, dos);

				// String

				writeString(this.REGION, dos);

				// String

				writeString(this.CODPOSTAL, dos);

				// String

				writeString(this.PAIS, dos);

				// String

				writeString(this.TELEFONO, dos);

				// String

				writeString(this.FAX, dos);

				// String

				writeString(this.PAGINAPRINCIPAL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IDPROVEEDOR=" + String.valueOf(IDPROVEEDOR));
			sb.append(",NOMBRECOMPANIA=" + NOMBRECOMPANIA);
			sb.append(",NOMBRECONTACTO=" + NOMBRECONTACTO);
			sb.append(",CARGOCONTACTO=" + CARGOCONTACTO);
			sb.append(",DIRECCION=" + DIRECCION);
			sb.append(",CIUDAD=" + CIUDAD);
			sb.append(",REGION=" + REGION);
			sb.append(",CODPOSTAL=" + CODPOSTAL);
			sb.append(",PAIS=" + PAIS);
			sb.append(",TELEFONO=" + TELEFONO);
			sb.append(",FAX=" + FAX);
			sb.append(",PAGINAPRINCIPAL=" + PAGINAPRINCIPAL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.IDPROVEEDOR,
					other.IDPROVEEDOR);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_6Process(globalMap);

				row2Struct row2 = new row2Struct();
				provStruct prov = new provStruct();
				row6Struct row6 = new row6Struct();

				/**
				 * [tAdvancedHash_row6 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row6", false);
				start_Hash
						.put("tAdvancedHash_row6", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row6 = 0;

				class BytesLimit65535_tAdvancedHash_row6 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_row6().limitLog4jByte();

				// connection name:row6
				// source node:tDBOutput_5 - inputs:(prov) outputs:(row6,row6) |
				// target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
				// linked node: tMap_3 - inputs:(row6,row5,row4)
				// outputs:(producto)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row6Struct> getLookup(matchingModeEnum_row6);

				globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);

				/**
				 * [tAdvancedHash_row6 begin ] stop
				 */

				/**
				 * [tDBOutput_5 begin ] start
				 */

				ok_Hash.put("tDBOutput_5", false);
				start_Hash.put("tDBOutput_5", System.currentTimeMillis());

				currentComponent = "tDBOutput_5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("prov" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_5 = 0;

				class BytesLimit65535_tDBOutput_5 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBOutput_5().limitLog4jByte();

				int nb_line_tDBOutput_5 = 0;
				int nb_line_update_tDBOutput_5 = 0;
				int nb_line_inserted_tDBOutput_5 = 0;
				int nb_line_deleted_tDBOutput_5 = 0;
				int nb_line_rejected_tDBOutput_5 = 0;

				int deletedCount_tDBOutput_5 = 0;
				int updatedCount_tDBOutput_5 = 0;
				int insertedCount_tDBOutput_5 = 0;

				int rejectedCount_tDBOutput_5 = 0;

				String tableName_tDBOutput_5 = "proveedor";
				boolean whetherReject_tDBOutput_5 = false;

				java.util.Calendar calendar_tDBOutput_5 = java.util.Calendar
						.getInstance();
				calendar_tDBOutput_5.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_5 = calendar_tDBOutput_5.getTime()
						.getTime();
				calendar_tDBOutput_5.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_5 = calendar_tDBOutput_5.getTime()
						.getTime();
				long date_tDBOutput_5;

				java.sql.Connection conn_tDBOutput_5 = null;
				String dbProperties_tDBOutput_5 = "noDatetimeStringSync=true";
				String url_tDBOutput_5 = null;
				if (dbProperties_tDBOutput_5 == null
						|| dbProperties_tDBOutput_5.trim().length() == 0) {
					url_tDBOutput_5 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "ssd" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_5 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_5
							.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_5 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_5 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "ssd" + "?"
							+ properties_tDBOutput_5;
				}
				String driverClass_tDBOutput_5 = "org.gjt.mm.mysql.Driver";

				String dbUser_tDBOutput_5 = "root";

				final String decryptedPassword_tDBOutput_5 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");

				String dbPwd_tDBOutput_5 = decryptedPassword_tDBOutput_5;
				java.lang.Class.forName(driverClass_tDBOutput_5);

				conn_tDBOutput_5 = java.sql.DriverManager.getConnection(
						url_tDBOutput_5, dbUser_tDBOutput_5, dbPwd_tDBOutput_5);

				resourceMap.put("conn_tDBOutput_5", conn_tDBOutput_5);
				conn_tDBOutput_5.setAutoCommit(false);
				int commitEvery_tDBOutput_5 = 10000;
				int commitCounter_tDBOutput_5 = 0;

				int count_tDBOutput_5 = 0;

				String insert_tDBOutput_5 = "INSERT INTO `"
						+ "proveedor"
						+ "` (`idproveedor`,`nombrecompania`,`nombrecontacto`,`cargocontacto`,`idpais`,`idciudad`,`direccion`,`region`,`codpostal`,`telefono`,`fax`,`paginaprincipal`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tDBOutput_5 = 100;
				int batchSizeCounter_tDBOutput_5 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5
						.prepareStatement(insert_tDBOutput_5);

				/**
				 * [tDBOutput_5 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_2 = 0;

				class BytesLimit65535_tMap_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_2().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) globalMap
						.get("tHash_Lookup_row3"));

				row3Struct row3HashKey = new row3Struct();
				row3Struct row3Default = new row3Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				provStruct prov_tmp = new provStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				class BytesLimit65535_tDBInput_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_3().limitLog4jByte();

				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "net.ucanaccess.jdbc.UcanaccessDriver";
				java.lang.Class.forName(driverClass_tDBInput_3);

				String url_tDBInput_3 = "jdbc:ucanaccess://"
						+ "/Users/tomasmalio/Desktop/SSD/TP_Integrador_Enunciado_y_Bases/Neptuno.mdb"
						+ ";jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;singleConnection=true";
				String dbUser_tDBInput_3 = "";

				final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");

				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;

				String atnParams_tDBInput_3 = "jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;memory=false";
				atnParams_tDBInput_3 = atnParams_tDBInput_3.replaceAll("&",
						"\n");
				java.util.Properties atnParamsPrope_tDBInput_3 = new java.util.Properties();
				atnParamsPrope_tDBInput_3.put("user", dbUser_tDBInput_3);
				atnParamsPrope_tDBInput_3.put("password", dbPwd_tDBInput_3);
				atnParamsPrope_tDBInput_3
						.load(new java.io.ByteArrayInputStream(
								atnParams_tDBInput_3.getBytes()));
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(
						url_tDBInput_3, atnParamsPrope_tDBInput_3);

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3
						.createStatement();

				String dbquery_tDBInput_3 = "SELECT \n  PROVEEDORES.IDPROVEEDOR, \n  PROVEEDORES.[NOMBRECOMPAÑÍA], \n  PROVEEDORES.NOMBRECONTACTO, \n  PROVEEDORES.CARGO"
						+ "CONTACTO, \n  PROVEEDORES.[DIRECCIÓN], \n  PROVEEDORES.CIUDAD, \n  PROVEEDORES.[REGIÓN], \n  PROVEEDORES.[CÓDPOSTAL], \n  PRO"
						+ "VEEDORES.[PAÍS], \n  PROVEEDORES.[TELÉFONO], \n  PROVEEDORES.FAX, \n  PROVEEDORES.[PÁGINAPRINCIPAL]\nFROM PROVEEDORES";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3
							.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3
							.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3
							.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row2.IDPROVEEDOR = null;
						} else {

							if (rs_tDBInput_3.getObject(1) != null) {
								row2.IDPROVEEDOR = rs_tDBInput_3.getInt(1);
							} else {
								row2.IDPROVEEDOR = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row2.NOMBRECOMPANIA = null;
						} else {

							row2.NOMBRECOMPANIA = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 2, false);
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							row2.NOMBRECONTACTO = null;
						} else {

							row2.NOMBRECONTACTO = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 3, false);
						}
						if (colQtyInRs_tDBInput_3 < 4) {
							row2.CARGOCONTACTO = null;
						} else {

							row2.CARGOCONTACTO = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 4, false);
						}
						if (colQtyInRs_tDBInput_3 < 5) {
							row2.DIRECCION = null;
						} else {

							row2.DIRECCION = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 5, false);
						}
						if (colQtyInRs_tDBInput_3 < 6) {
							row2.CIUDAD = null;
						} else {

							row2.CIUDAD = routines.system.JDBCUtil.getString(
									rs_tDBInput_3, 6, false);
						}
						if (colQtyInRs_tDBInput_3 < 7) {
							row2.REGION = null;
						} else {

							row2.REGION = routines.system.JDBCUtil.getString(
									rs_tDBInput_3, 7, false);
						}
						if (colQtyInRs_tDBInput_3 < 8) {
							row2.CODPOSTAL = null;
						} else {

							row2.CODPOSTAL = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 8, false);
						}
						if (colQtyInRs_tDBInput_3 < 9) {
							row2.PAIS = null;
						} else {

							row2.PAIS = routines.system.JDBCUtil.getString(
									rs_tDBInput_3, 9, false);
						}
						if (colQtyInRs_tDBInput_3 < 10) {
							row2.TELEFONO = null;
						} else {

							row2.TELEFONO = routines.system.JDBCUtil.getString(
									rs_tDBInput_3, 10, false);
						}
						if (colQtyInRs_tDBInput_3 < 11) {
							row2.FAX = null;
						} else {

							row2.FAX = routines.system.JDBCUtil.getString(
									rs_tDBInput_3, 11, false);
						}
						if (colQtyInRs_tDBInput_3 < 12) {
							row2.PAGINAPRINCIPAL = null;
						} else {

							row2.PAGINAPRINCIPAL = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 12, false);
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						// row2
						// row2

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row3"
						// /////////////////////////////////////////////

						boolean forceLooprow3 = false;

						row3Struct row3ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							row3HashKey.nombreciudad = row2.CIUDAD;

							row3HashKey.hashCodeDirty = true;

							tHash_Lookup_row3.lookup(row3HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row3 != null
								&& tHash_Lookup_row3.getCount(row3HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3' and it contains more one result from keys :  row3.nombreciudad = '"
							// + row3HashKey.nombreciudad + "'");
						} // G 071

						row3Struct row3 = null;

						row3Struct fromLookup_row3 = null;
						row3 = row3Default;

						if (tHash_Lookup_row3 != null
								&& tHash_Lookup_row3.hasNext()) { // G 099

							fromLookup_row3 = tHash_Lookup_row3.next();

						} // G 099

						if (fromLookup_row3 != null) {
							row3 = fromLookup_row3;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
							// ###############################
							// # Output tables

							prov = null;

							// # Output table : 'prov'
							prov_tmp.idproveedor = row2.IDPROVEEDOR;
							prov_tmp.nombrecompania = row2.NOMBRECOMPANIA;
							prov_tmp.nombrecontacto = row2.NOMBRECONTACTO;
							prov_tmp.cargocontacto = row2.CARGOCONTACTO;
							prov_tmp.idpais = row3.idpais;
							prov_tmp.idciudad = row3.idciudad;
							prov_tmp.direccion = row2.DIRECCION;
							prov_tmp.region = row2.REGION;
							prov_tmp.codpostal = row2.CODPOSTAL;
							prov_tmp.telefono = row2.TELEFONO;
							prov_tmp.fax = row2.FAX;
							prov_tmp.paginaprincipal = row2.PAGINAPRINCIPAL;
							prov = prov_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */

						/**
						 * [tMap_2 process_data_begin ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_begin ] stop
						 */
						// Start of branch "prov"
						if (prov != null) {

							/**
							 * [tDBOutput_5 main ] start
							 */

							currentComponent = "tDBOutput_5";

							// prov
							// prov

							if (execStat) {
								runStat.updateStatOnConnection("prov"
										+ iterateId, 1, 1);
							}

							row6 = null;
							row6 = null;
							whetherReject_tDBOutput_5 = false;
							pstmt_tDBOutput_5.setInt(1, prov.idproveedor);

							if (prov.nombrecompania == null) {
								pstmt_tDBOutput_5.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_5.setString(2,
										prov.nombrecompania);
							}

							if (prov.nombrecontacto == null) {
								pstmt_tDBOutput_5.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_5.setString(3,
										prov.nombrecontacto);
							}

							if (prov.cargocontacto == null) {
								pstmt_tDBOutput_5.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_5.setString(4,
										prov.cargocontacto);
							}

							if (prov.idpais == null) {
								pstmt_tDBOutput_5.setNull(5,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_5.setInt(5, prov.idpais);
							}

							if (prov.idciudad == null) {
								pstmt_tDBOutput_5.setNull(6,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_5.setInt(6, prov.idciudad);
							}

							if (prov.direccion == null) {
								pstmt_tDBOutput_5.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_5.setString(7, prov.direccion);
							}

							if (prov.region == null) {
								pstmt_tDBOutput_5.setNull(8,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_5.setString(8, prov.region);
							}

							if (prov.codpostal == null) {
								pstmt_tDBOutput_5.setNull(9,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_5.setString(9, prov.codpostal);
							}

							if (prov.telefono == null) {
								pstmt_tDBOutput_5.setNull(10,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_5.setString(10, prov.telefono);
							}

							if (prov.fax == null) {
								pstmt_tDBOutput_5.setNull(11,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_5.setString(11, prov.fax);
							}

							if (prov.paginaprincipal == null) {
								pstmt_tDBOutput_5.setNull(12,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_5.setString(12,
										prov.paginaprincipal);
							}

							pstmt_tDBOutput_5.addBatch();
							nb_line_tDBOutput_5++;

							batchSizeCounter_tDBOutput_5++;
							if (!whetherReject_tDBOutput_5) {
								row6 = new row6Struct();
								row6.idproveedor = prov.idproveedor;
								row6.nombrecompania = prov.nombrecompania;
								row6.nombrecontacto = prov.nombrecontacto;
								row6.cargocontacto = prov.cargocontacto;
								row6.idpais = prov.idpais;
								row6.idciudad = prov.idciudad;
								row6.direccion = prov.direccion;
								row6.region = prov.region;
								row6.codpostal = prov.codpostal;
								row6.telefono = prov.telefono;
								row6.fax = prov.fax;
								row6.paginaprincipal = prov.paginaprincipal;
								row6 = new row6Struct();
								row6.idproveedor = prov.idproveedor;
								row6.nombrecompania = prov.nombrecompania;
								row6.nombrecontacto = prov.nombrecontacto;
								row6.cargocontacto = prov.cargocontacto;
								row6.idpais = prov.idpais;
								row6.idciudad = prov.idciudad;
								row6.direccion = prov.direccion;
								row6.region = prov.region;
								row6.codpostal = prov.codpostal;
								row6.telefono = prov.telefono;
								row6.fax = prov.fax;
								row6.paginaprincipal = prov.paginaprincipal;
							}
							if (batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5) {
								try {
									int countSum_tDBOutput_5 = 0;
									for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5
											.executeBatch()) {
										countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
												: 1);
									}
									insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
								} catch (java.sql.BatchUpdateException e) {
									int countSum_tDBOutput_5 = 0;
									for (int countEach_tDBOutput_5 : e
											.getUpdateCounts()) {
										countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
												: countEach_tDBOutput_5);
									}
									insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
									System.err.println(e.getMessage());
								}

								batchSizeCounter_tDBOutput_5 = 0;
							}
							commitCounter_tDBOutput_5++;

							if (commitEvery_tDBOutput_5 <= commitCounter_tDBOutput_5) {

								try {
									int countSum_tDBOutput_5 = 0;
									for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5
											.executeBatch()) {
										countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
												: 1);
									}
									insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
								} catch (java.sql.BatchUpdateException e) {
									int countSum_tDBOutput_5 = 0;
									for (int countEach_tDBOutput_5 : e
											.getUpdateCounts()) {
										countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
												: countEach_tDBOutput_5);
									}
									insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
									System.err.println(e.getMessage());

								}
								conn_tDBOutput_5.commit();
								commitCounter_tDBOutput_5 = 0;

							}

							tos_count_tDBOutput_5++;

							/**
							 * [tDBOutput_5 main ] stop
							 */

							/**
							 * [tDBOutput_5 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_5";

							/**
							 * [tDBOutput_5 process_data_begin ] stop
							 */
							// Start of branch "row6"
							if (row6 != null) {

								/**
								 * [tAdvancedHash_row6 main ] start
								 */

								currentComponent = "tAdvancedHash_row6";

								// row6
								// row6

								if (execStat) {
									runStat.updateStatOnConnection("row6"
											+ iterateId, 1, 1);
								}

								row6Struct row6_HashRow = new row6Struct();

								row6_HashRow.idproveedor = row6.idproveedor;

								row6_HashRow.nombrecompania = row6.nombrecompania;

								row6_HashRow.nombrecontacto = row6.nombrecontacto;

								row6_HashRow.cargocontacto = row6.cargocontacto;

								row6_HashRow.idpais = row6.idpais;

								row6_HashRow.idciudad = row6.idciudad;

								row6_HashRow.direccion = row6.direccion;

								row6_HashRow.region = row6.region;

								row6_HashRow.codpostal = row6.codpostal;

								row6_HashRow.telefono = row6.telefono;

								row6_HashRow.fax = row6.fax;

								row6_HashRow.paginaprincipal = row6.paginaprincipal;

								tHash_Lookup_row6.put(row6_HashRow);

								tos_count_tAdvancedHash_row6++;

								/**
								 * [tAdvancedHash_row6 main ] stop
								 */

								/**
								 * [tAdvancedHash_row6 process_data_begin ]
								 * start
								 */

								currentComponent = "tAdvancedHash_row6";

								/**
								 * [tAdvancedHash_row6 process_data_begin ] stop
								 */

								/**
								 * [tAdvancedHash_row6 process_data_end ] start
								 */

								currentComponent = "tAdvancedHash_row6";

								/**
								 * [tAdvancedHash_row6 process_data_end ] stop
								 */

							} // End of branch "row6"

							/**
							 * [tDBOutput_5 process_data_end ] start
							 */

							currentComponent = "tDBOutput_5";

							/**
							 * [tDBOutput_5 process_data_end ] stop
							 */

						} // End of branch "prov"

						/**
						 * [tMap_2 process_data_end ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					stmt_tDBInput_3.close();

					if (conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {

						conn_tDBInput_3.close();

					}
				}
				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row3 != null) {
					tHash_Lookup_row3.endGet();
				}
				globalMap.remove("tHash_Lookup_row3");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tDBOutput_5 end ] start
				 */

				currentComponent = "tDBOutput_5";

				try {
					if (batchSizeCounter_tDBOutput_5 != 0) {
						int countSum_tDBOutput_5 = 0;

						for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5
								.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
									: 1);
						}

						insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_5 = 0;
					for (int countEach_tDBOutput_5 : e.getUpdateCounts()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
								: countEach_tDBOutput_5);
					}

					insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

					globalMap.put(currentComponent + "_ERROR_MESSAGE",
							e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_5 = 0;

				if (pstmt_tDBOutput_5 != null) {

					pstmt_tDBOutput_5.close();

				}

				if (commitCounter_tDBOutput_5 > 0) {

					conn_tDBOutput_5.commit();

				}

				conn_tDBOutput_5.close();

				resourceMap.put("finish_tDBOutput_5", true);

				nb_line_deleted_tDBOutput_5 = nb_line_deleted_tDBOutput_5
						+ deletedCount_tDBOutput_5;
				nb_line_update_tDBOutput_5 = nb_line_update_tDBOutput_5
						+ updatedCount_tDBOutput_5;
				nb_line_inserted_tDBOutput_5 = nb_line_inserted_tDBOutput_5
						+ insertedCount_tDBOutput_5;
				nb_line_rejected_tDBOutput_5 = nb_line_rejected_tDBOutput_5
						+ rejectedCount_tDBOutput_5;

				globalMap.put("tDBOutput_5_NB_LINE", nb_line_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_5);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("prov" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_5", true);
				end_Hash.put("tDBOutput_5", System.currentTimeMillis());

				/**
				 * [tDBOutput_5 end ] stop
				 */

				/**
				 * [tAdvancedHash_row6 end ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				tHash_Lookup_row6.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row6", true);
				end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row3");

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tDBOutput_5 finally ] start
				 */

				currentComponent = "tDBOutput_5";

				if (resourceMap.get("finish_tDBOutput_5") == null) {
					if (resourceMap.get("conn_tDBOutput_5") != null) {
						try {

							java.sql.Connection ctn_tDBOutput_5 = (java.sql.Connection) resourceMap
									.get("conn_tDBOutput_5");

							ctn_tDBOutput_5.close();

						} catch (java.sql.SQLException sqlEx_tDBOutput_5) {
							String errorMessage_tDBOutput_5 = "failed to close the connection in tDBOutput_5 :"
									+ sqlEx_tDBOutput_5.getMessage();

							System.err.println(errorMessage_tDBOutput_5);
						}
					}
				}

				/**
				 * [tDBOutput_5 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row6 finally ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				/**
				 * [tAdvancedHash_row6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableComparableLookupRow<row3Struct> {
		final static byte[] commonByteArrayLock_SSD_testing = new byte[0];
		static byte[] commonByteArray_SSD_testing = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idciudad;

		public int getIdciudad() {
			return this.idciudad;
		}

		public String nombreciudad;

		public String getNombreciudad() {
			return this.nombreciudad;
		}

		public int idpais;

		public int getIdpais() {
			return this.idpais;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.nombreciudad == null) ? 0 : this.nombreciudad
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.nombreciudad == null) {
				if (other.nombreciudad != null)
					return false;

			} else if (!this.nombreciudad.equals(other.nombreciudad))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.idciudad = this.idciudad;
			other.nombreciudad = this.nombreciudad;
			other.idpais = this.idpais;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.nombreciudad = this.nombreciudad;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SSD_testing.length) {
					if (length < 1024
							&& commonByteArray_SSD_testing.length == 0) {
						commonByteArray_SSD_testing = new byte[1024];
					} else {
						commonByteArray_SSD_testing = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SSD_testing, 0, length);
				strReturn = new String(commonByteArray_SSD_testing, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSD_testing) {

				try {

					int length = 0;

					this.nombreciudad = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.nombreciudad, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.idciudad = dis.readInt();

				this.idpais = dis.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.idciudad);

				dos.writeInt(this.idpais);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idciudad=" + String.valueOf(idciudad));
			sb.append(",nombreciudad=" + nombreciudad);
			sb.append(",idpais=" + String.valueOf(idpais));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.nombreciudad,
					other.nombreciudad);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tAdvancedHash_row3 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row3", false);
				start_Hash
						.put("tAdvancedHash_row3", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row3 = 0;

				class BytesLimit65535_tAdvancedHash_row3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_row3().limitLog4jByte();

				// connection name:row3
				// source node:tDBInput_6 - inputs:(after_tDBInput_3)
				// outputs:(row3,row3) | target node:tAdvancedHash_row3 -
				// inputs:(row3) outputs:()
				// linked node: tMap_2 - inputs:(row2,row3) outputs:(prov)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row3Struct> getLookup(matchingModeEnum_row3);

				globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);

				/**
				 * [tAdvancedHash_row3 begin ] stop
				 */

				/**
				 * [tDBInput_6 begin ] start
				 */

				ok_Hash.put("tDBInput_6", false);
				start_Hash.put("tDBInput_6", System.currentTimeMillis());

				currentComponent = "tDBInput_6";

				int tos_count_tDBInput_6 = 0;

				class BytesLimit65535_tDBInput_6 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_6().limitLog4jByte();

				java.util.Calendar calendar_tDBInput_6 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_6.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_6 = calendar_tDBInput_6.getTime();
				int nb_line_tDBInput_6 = 0;
				java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tDBInput_6);
				String dbUser_tDBInput_6 = "root";

				final String decryptedPassword_tDBInput_6 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");

				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;

				String url_tDBInput_6 = "jdbc:mysql://" + "localhost" + ":"
						+ "3306" + "/" + "ssd" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_6 = java.sql.DriverManager.getConnection(
						url_tDBInput_6, dbUser_tDBInput_6, dbPwd_tDBInput_6);

				java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6
						.createStatement();

				String dbquery_tDBInput_6 = "SELECT \n  `ciudad`.`idciudad`, \n  `ciudad`.`nombreciudad`, \n  `ciudad`.`idpais`\nFROM `ciudad`";

				globalMap.put("tDBInput_6_QUERY", dbquery_tDBInput_6);
				java.sql.ResultSet rs_tDBInput_6 = null;

				try {
					rs_tDBInput_6 = stmt_tDBInput_6
							.executeQuery(dbquery_tDBInput_6);
					java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6
							.getMetaData();
					int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6
							.getColumnCount();

					String tmpContent_tDBInput_6 = null;

					while (rs_tDBInput_6.next()) {
						nb_line_tDBInput_6++;

						if (colQtyInRs_tDBInput_6 < 1) {
							row3.idciudad = 0;
						} else {

							if (rs_tDBInput_6.getObject(1) != null) {
								row3.idciudad = rs_tDBInput_6.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_6 < 2) {
							row3.nombreciudad = null;
						} else {

							row3.nombreciudad = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 2, false);
						}
						if (colQtyInRs_tDBInput_6 < 3) {
							row3.idpais = 0;
						} else {

							if (rs_tDBInput_6.getObject(3) != null) {
								row3.idpais = rs_tDBInput_6.getInt(3);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						/**
						 * [tDBInput_6 begin ] stop
						 */

						/**
						 * [tDBInput_6 main ] start
						 */

						currentComponent = "tDBInput_6";

						tos_count_tDBInput_6++;

						/**
						 * [tDBInput_6 main ] stop
						 */

						/**
						 * [tDBInput_6 process_data_begin ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row3 main ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						// row3
						// row3

						if (execStat) {
							runStat.updateStatOnConnection("row3" + iterateId,
									1, 1);
						}

						row3Struct row3_HashRow = new row3Struct();

						row3_HashRow.idciudad = row3.idciudad;

						row3_HashRow.nombreciudad = row3.nombreciudad;

						row3_HashRow.idpais = row3.idpais;

						tHash_Lookup_row3.put(row3_HashRow);

						tos_count_tAdvancedHash_row3++;

						/**
						 * [tAdvancedHash_row3 main ] stop
						 */

						/**
						 * [tAdvancedHash_row3 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						/**
						 * [tAdvancedHash_row3 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row3 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						/**
						 * [tAdvancedHash_row3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 process_data_end ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 end ] start
						 */

						currentComponent = "tDBInput_6";

					}
				} finally {
					if (rs_tDBInput_6 != null) {
						rs_tDBInput_6.close();
					}
					stmt_tDBInput_6.close();
					if (conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {

						conn_tDBInput_6.close();

					}

				}

				globalMap.put("tDBInput_6_NB_LINE", nb_line_tDBInput_6);

				ok_Hash.put("tDBInput_6", true);
				end_Hash.put("tDBInput_6", System.currentTimeMillis());

				/**
				 * [tDBInput_6 end ] stop
				 */

				/**
				 * [tAdvancedHash_row3 end ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				tHash_Lookup_row3.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row3", true);
				end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_6 finally ] start
				 */

				currentComponent = "tDBInput_6";

				/**
				 * [tDBInput_6 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row3 finally ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				/**
				 * [tAdvancedHash_row3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements
			routines.system.IPersistableComparableLookupRow<row5Struct> {
		final static byte[] commonByteArrayLock_SSD_testing = new byte[0];
		static byte[] commonByteArray_SSD_testing = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idcategoria;

		public int getIdcategoria() {
			return this.idcategoria;
		}

		public String nombrecategoria;

		public String getNombrecategoria() {
			return this.nombrecategoria;
		}

		public String descripcion;

		public String getDescripcion() {
			return this.descripcion;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idcategoria;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.idcategoria != other.idcategoria)
				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.idcategoria = this.idcategoria;
			other.nombrecategoria = this.nombrecategoria;
			other.descripcion = this.descripcion;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.idcategoria = this.idcategoria;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSD_testing) {

				try {

					int length = 0;

					this.idcategoria = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idcategoria);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.nombrecategoria = readString(dis, ois);

				this.descripcion = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.nombrecategoria, dos, oos);

				writeString(this.descripcion, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idcategoria=" + String.valueOf(idcategoria));
			sb.append(",nombrecategoria=" + nombrecategoria);
			sb.append(",descripcion=" + descripcion);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idcategoria,
					other.idcategoria);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class categoriasStruct implements
			routines.system.IPersistableRow<categoriasStruct> {
		final static byte[] commonByteArrayLock_SSD_testing = new byte[0];
		static byte[] commonByteArray_SSD_testing = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idcategoria;

		public int getIdcategoria() {
			return this.idcategoria;
		}

		public String nombrecategoria;

		public String getNombrecategoria() {
			return this.nombrecategoria;
		}

		public String descripcion;

		public String getDescripcion() {
			return this.descripcion;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idcategoria;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final categoriasStruct other = (categoriasStruct) obj;

			if (this.idcategoria != other.idcategoria)
				return false;

			return true;
		}

		public void copyDataTo(categoriasStruct other) {

			other.idcategoria = this.idcategoria;
			other.nombrecategoria = this.nombrecategoria;
			other.descripcion = this.descripcion;

		}

		public void copyKeysDataTo(categoriasStruct other) {

			other.idcategoria = this.idcategoria;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SSD_testing.length) {
					if (length < 1024
							&& commonByteArray_SSD_testing.length == 0) {
						commonByteArray_SSD_testing = new byte[1024];
					} else {
						commonByteArray_SSD_testing = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SSD_testing, 0, length);
				strReturn = new String(commonByteArray_SSD_testing, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSD_testing) {

				try {

					int length = 0;

					this.idcategoria = dis.readInt();

					this.nombrecategoria = readString(dis);

					this.descripcion = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idcategoria);

				// String

				writeString(this.nombrecategoria, dos);

				// String

				writeString(this.descripcion, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idcategoria=" + String.valueOf(idcategoria));
			sb.append(",nombrecategoria=" + nombrecategoria);
			sb.append(",descripcion=" + descripcion);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(categoriasStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idcategoria,
					other.idcategoria);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_SSD_testing = new byte[0];
		static byte[] commonByteArray_SSD_testing = new byte[0];

		public Integer IDCATEGORIA;

		public Integer getIDCATEGORIA() {
			return this.IDCATEGORIA;
		}

		public String NOMBRECATEGORIA;

		public String getNOMBRECATEGORIA() {
			return this.NOMBRECATEGORIA;
		}

		public String DESCRIPCION;

		public String getDESCRIPCION() {
			return this.DESCRIPCION;
		}

		public String IMAGEN;

		public String getIMAGEN() {
			return this.IMAGEN;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SSD_testing.length) {
					if (length < 1024
							&& commonByteArray_SSD_testing.length == 0) {
						commonByteArray_SSD_testing = new byte[1024];
					} else {
						commonByteArray_SSD_testing = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SSD_testing, 0, length);
				strReturn = new String(commonByteArray_SSD_testing, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSD_testing) {

				try {

					int length = 0;

					this.IDCATEGORIA = readInteger(dis);

					this.NOMBRECATEGORIA = readString(dis);

					this.DESCRIPCION = readString(dis);

					this.IMAGEN = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.IDCATEGORIA, dos);

				// String

				writeString(this.NOMBRECATEGORIA, dos);

				// String

				writeString(this.DESCRIPCION, dos);

				// String

				writeString(this.IMAGEN, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IDCATEGORIA=" + String.valueOf(IDCATEGORIA));
			sb.append(",NOMBRECATEGORIA=" + NOMBRECATEGORIA);
			sb.append(",DESCRIPCION=" + DESCRIPCION);
			sb.append(",IMAGEN=" + IMAGEN);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_8Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				categoriasStruct categorias = new categoriasStruct();
				row5Struct row5 = new row5Struct();

				/**
				 * [tAdvancedHash_row5 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row5", false);
				start_Hash
						.put("tAdvancedHash_row5", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row5 = 0;

				class BytesLimit65535_tAdvancedHash_row5 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_row5().limitLog4jByte();

				// connection name:row5
				// source node:tDBOutput_8 - inputs:(categorias)
				// outputs:(row5,row5) | target node:tAdvancedHash_row5 -
				// inputs:(row5) outputs:()
				// linked node: tMap_3 - inputs:(row6,row5,row4)
				// outputs:(producto)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row5Struct> getLookup(matchingModeEnum_row5);

				globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);

				/**
				 * [tAdvancedHash_row5 begin ] stop
				 */

				/**
				 * [tDBOutput_8 begin ] start
				 */

				ok_Hash.put("tDBOutput_8", false);
				start_Hash.put("tDBOutput_8", System.currentTimeMillis());

				currentComponent = "tDBOutput_8";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection(
								"categorias" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_8 = 0;

				class BytesLimit65535_tDBOutput_8 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBOutput_8().limitLog4jByte();

				int nb_line_tDBOutput_8 = 0;
				int nb_line_update_tDBOutput_8 = 0;
				int nb_line_inserted_tDBOutput_8 = 0;
				int nb_line_deleted_tDBOutput_8 = 0;
				int nb_line_rejected_tDBOutput_8 = 0;

				int deletedCount_tDBOutput_8 = 0;
				int updatedCount_tDBOutput_8 = 0;
				int insertedCount_tDBOutput_8 = 0;

				int rejectedCount_tDBOutput_8 = 0;

				String tableName_tDBOutput_8 = "categoria";
				boolean whetherReject_tDBOutput_8 = false;

				java.util.Calendar calendar_tDBOutput_8 = java.util.Calendar
						.getInstance();
				calendar_tDBOutput_8.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_8 = calendar_tDBOutput_8.getTime()
						.getTime();
				calendar_tDBOutput_8.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_8 = calendar_tDBOutput_8.getTime()
						.getTime();
				long date_tDBOutput_8;

				java.sql.Connection conn_tDBOutput_8 = null;
				String dbProperties_tDBOutput_8 = "noDatetimeStringSync=true";
				String url_tDBOutput_8 = null;
				if (dbProperties_tDBOutput_8 == null
						|| dbProperties_tDBOutput_8.trim().length() == 0) {
					url_tDBOutput_8 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "ssd" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_8 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_8
							.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_8 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_8 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "ssd" + "?"
							+ properties_tDBOutput_8;
				}
				String driverClass_tDBOutput_8 = "org.gjt.mm.mysql.Driver";

				String dbUser_tDBOutput_8 = "root";

				final String decryptedPassword_tDBOutput_8 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");

				String dbPwd_tDBOutput_8 = decryptedPassword_tDBOutput_8;
				java.lang.Class.forName(driverClass_tDBOutput_8);

				conn_tDBOutput_8 = java.sql.DriverManager.getConnection(
						url_tDBOutput_8, dbUser_tDBOutput_8, dbPwd_tDBOutput_8);

				resourceMap.put("conn_tDBOutput_8", conn_tDBOutput_8);
				conn_tDBOutput_8.setAutoCommit(false);
				int commitEvery_tDBOutput_8 = 10000;
				int commitCounter_tDBOutput_8 = 0;

				int count_tDBOutput_8 = 0;

				String insert_tDBOutput_8 = "INSERT INTO `"
						+ "categoria"
						+ "` (`idcategoria`,`nombrecategoria`,`descripcion`) VALUES (?,?,?)";
				int batchSize_tDBOutput_8 = 100;
				int batchSizeCounter_tDBOutput_8 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_8 = conn_tDBOutput_8
						.prepareStatement(insert_tDBOutput_8);

				/**
				 * [tDBOutput_8 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				class BytesLimit65535_tMap_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_1().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				categoriasStruct categorias_tmp = new categoriasStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tDBInput_8 begin ] start
				 */

				ok_Hash.put("tDBInput_8", false);
				start_Hash.put("tDBInput_8", System.currentTimeMillis());

				currentComponent = "tDBInput_8";

				int tos_count_tDBInput_8 = 0;

				class BytesLimit65535_tDBInput_8 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_8().limitLog4jByte();

				int nb_line_tDBInput_8 = 0;
				java.sql.Connection conn_tDBInput_8 = null;
				String driverClass_tDBInput_8 = "net.ucanaccess.jdbc.UcanaccessDriver";
				java.lang.Class.forName(driverClass_tDBInput_8);

				String url_tDBInput_8 = "jdbc:ucanaccess://"
						+ "/Users/tomasmalio/Desktop/SSD/TP_Integrador_Enunciado_y_Bases/Neptuno.mdb"
						+ ";jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;singleConnection=true";
				String dbUser_tDBInput_8 = "";

				final String decryptedPassword_tDBInput_8 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");

				String dbPwd_tDBInput_8 = decryptedPassword_tDBInput_8;

				String atnParams_tDBInput_8 = "jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;memory=false";
				atnParams_tDBInput_8 = atnParams_tDBInput_8.replaceAll("&",
						"\n");
				java.util.Properties atnParamsPrope_tDBInput_8 = new java.util.Properties();
				atnParamsPrope_tDBInput_8.put("user", dbUser_tDBInput_8);
				atnParamsPrope_tDBInput_8.put("password", dbPwd_tDBInput_8);
				atnParamsPrope_tDBInput_8
						.load(new java.io.ByteArrayInputStream(
								atnParams_tDBInput_8.getBytes()));
				conn_tDBInput_8 = java.sql.DriverManager.getConnection(
						url_tDBInput_8, atnParamsPrope_tDBInput_8);

				java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8
						.createStatement();

				String dbquery_tDBInput_8 = "SELECT \n  [CATEGORÍAS].[IDCATEGORÍA], \n  [CATEGORÍAS].[NOMBRECATEGORÍA], \n  [CATEGORÍAS].[DESCRIPCIÓN], \n  [CATEGORÍAS]"
						+ ".IMAGEN\nFROM [CATEGORÍAS]";

				globalMap.put("tDBInput_8_QUERY", dbquery_tDBInput_8);
				java.sql.ResultSet rs_tDBInput_8 = null;

				try {
					rs_tDBInput_8 = stmt_tDBInput_8
							.executeQuery(dbquery_tDBInput_8);
					java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8
							.getMetaData();
					int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8
							.getColumnCount();

					String tmpContent_tDBInput_8 = null;

					while (rs_tDBInput_8.next()) {
						nb_line_tDBInput_8++;

						if (colQtyInRs_tDBInput_8 < 1) {
							row1.IDCATEGORIA = null;
						} else {

							if (rs_tDBInput_8.getObject(1) != null) {
								row1.IDCATEGORIA = rs_tDBInput_8.getInt(1);
							} else {
								row1.IDCATEGORIA = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 2) {
							row1.NOMBRECATEGORIA = null;
						} else {

							row1.NOMBRECATEGORIA = routines.system.JDBCUtil
									.getString(rs_tDBInput_8, 2, false);
						}
						if (colQtyInRs_tDBInput_8 < 3) {
							row1.DESCRIPCION = null;
						} else {

							row1.DESCRIPCION = routines.system.JDBCUtil
									.getString(rs_tDBInput_8, 3, false);
						}
						if (colQtyInRs_tDBInput_8 < 4) {
							row1.IMAGEN = null;
						} else {

							row1.IMAGEN = routines.system.JDBCUtil.getString(
									rs_tDBInput_8, 4, false);
						}

						/**
						 * [tDBInput_8 begin ] stop
						 */

						/**
						 * [tDBInput_8 main ] start
						 */

						currentComponent = "tDBInput_8";

						tos_count_tDBInput_8++;

						/**
						 * [tDBInput_8 main ] stop
						 */

						/**
						 * [tDBInput_8 process_data_begin ] start
						 */

						currentComponent = "tDBInput_8";

						/**
						 * [tDBInput_8 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							categorias = null;

							// # Output table : 'categorias'
							categorias_tmp.idcategoria = row1.IDCATEGORIA;
							categorias_tmp.nombrecategoria = row1.NOMBRECATEGORIA;
							categorias_tmp.descripcion = row1.DESCRIPCION;
							categorias = categorias_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
						// Start of branch "categorias"
						if (categorias != null) {

							/**
							 * [tDBOutput_8 main ] start
							 */

							currentComponent = "tDBOutput_8";

							// categorias
							// categorias

							if (execStat) {
								runStat.updateStatOnConnection("categorias"
										+ iterateId, 1, 1);
							}

							row5 = null;
							row5 = null;
							whetherReject_tDBOutput_8 = false;
							pstmt_tDBOutput_8.setInt(1, categorias.idcategoria);

							if (categorias.nombrecategoria == null) {
								pstmt_tDBOutput_8.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_8.setString(2,
										categorias.nombrecategoria);
							}

							if (categorias.descripcion == null) {
								pstmt_tDBOutput_8.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_8.setString(3,
										categorias.descripcion);
							}

							pstmt_tDBOutput_8.addBatch();
							nb_line_tDBOutput_8++;

							batchSizeCounter_tDBOutput_8++;
							if (!whetherReject_tDBOutput_8) {
								row5 = new row5Struct();
								row5.idcategoria = categorias.idcategoria;
								row5.nombrecategoria = categorias.nombrecategoria;
								row5.descripcion = categorias.descripcion;
								row5 = new row5Struct();
								row5.idcategoria = categorias.idcategoria;
								row5.nombrecategoria = categorias.nombrecategoria;
								row5.descripcion = categorias.descripcion;
							}
							if (batchSize_tDBOutput_8 <= batchSizeCounter_tDBOutput_8) {
								try {
									int countSum_tDBOutput_8 = 0;
									for (int countEach_tDBOutput_8 : pstmt_tDBOutput_8
											.executeBatch()) {
										countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0
												: 1);
									}
									insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
								} catch (java.sql.BatchUpdateException e) {
									int countSum_tDBOutput_8 = 0;
									for (int countEach_tDBOutput_8 : e
											.getUpdateCounts()) {
										countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0
												: countEach_tDBOutput_8);
									}
									insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
									System.err.println(e.getMessage());
								}

								batchSizeCounter_tDBOutput_8 = 0;
							}
							commitCounter_tDBOutput_8++;

							if (commitEvery_tDBOutput_8 <= commitCounter_tDBOutput_8) {

								try {
									int countSum_tDBOutput_8 = 0;
									for (int countEach_tDBOutput_8 : pstmt_tDBOutput_8
											.executeBatch()) {
										countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0
												: 1);
									}
									insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
								} catch (java.sql.BatchUpdateException e) {
									int countSum_tDBOutput_8 = 0;
									for (int countEach_tDBOutput_8 : e
											.getUpdateCounts()) {
										countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0
												: countEach_tDBOutput_8);
									}
									insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
									System.err.println(e.getMessage());

								}
								conn_tDBOutput_8.commit();
								commitCounter_tDBOutput_8 = 0;

							}

							tos_count_tDBOutput_8++;

							/**
							 * [tDBOutput_8 main ] stop
							 */

							/**
							 * [tDBOutput_8 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_8";

							/**
							 * [tDBOutput_8 process_data_begin ] stop
							 */
							// Start of branch "row5"
							if (row5 != null) {

								/**
								 * [tAdvancedHash_row5 main ] start
								 */

								currentComponent = "tAdvancedHash_row5";

								// row5
								// row5

								if (execStat) {
									runStat.updateStatOnConnection("row5"
											+ iterateId, 1, 1);
								}

								row5Struct row5_HashRow = new row5Struct();

								row5_HashRow.idcategoria = row5.idcategoria;

								row5_HashRow.nombrecategoria = row5.nombrecategoria;

								row5_HashRow.descripcion = row5.descripcion;

								tHash_Lookup_row5.put(row5_HashRow);

								tos_count_tAdvancedHash_row5++;

								/**
								 * [tAdvancedHash_row5 main ] stop
								 */

								/**
								 * [tAdvancedHash_row5 process_data_begin ]
								 * start
								 */

								currentComponent = "tAdvancedHash_row5";

								/**
								 * [tAdvancedHash_row5 process_data_begin ] stop
								 */

								/**
								 * [tAdvancedHash_row5 process_data_end ] start
								 */

								currentComponent = "tAdvancedHash_row5";

								/**
								 * [tAdvancedHash_row5 process_data_end ] stop
								 */

							} // End of branch "row5"

							/**
							 * [tDBOutput_8 process_data_end ] start
							 */

							currentComponent = "tDBOutput_8";

							/**
							 * [tDBOutput_8 process_data_end ] stop
							 */

						} // End of branch "categorias"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_8 process_data_end ] start
						 */

						currentComponent = "tDBInput_8";

						/**
						 * [tDBInput_8 process_data_end ] stop
						 */

						/**
						 * [tDBInput_8 end ] start
						 */

						currentComponent = "tDBInput_8";

					}
				} finally {
					stmt_tDBInput_8.close();

					if (conn_tDBInput_8 != null && !conn_tDBInput_8.isClosed()) {

						conn_tDBInput_8.close();

					}
				}
				globalMap.put("tDBInput_8_NB_LINE", nb_line_tDBInput_8);

				ok_Hash.put("tDBInput_8", true);
				end_Hash.put("tDBInput_8", System.currentTimeMillis());

				/**
				 * [tDBInput_8 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_8 end ] start
				 */

				currentComponent = "tDBOutput_8";

				try {
					if (batchSizeCounter_tDBOutput_8 != 0) {
						int countSum_tDBOutput_8 = 0;

						for (int countEach_tDBOutput_8 : pstmt_tDBOutput_8
								.executeBatch()) {
							countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0
									: 1);
						}

						insertedCount_tDBOutput_8 += countSum_tDBOutput_8;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_8 = 0;
					for (int countEach_tDBOutput_8 : e.getUpdateCounts()) {
						countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0
								: countEach_tDBOutput_8);
					}

					insertedCount_tDBOutput_8 += countSum_tDBOutput_8;

					globalMap.put(currentComponent + "_ERROR_MESSAGE",
							e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_8 = 0;

				if (pstmt_tDBOutput_8 != null) {

					pstmt_tDBOutput_8.close();

				}

				if (commitCounter_tDBOutput_8 > 0) {

					conn_tDBOutput_8.commit();

				}

				conn_tDBOutput_8.close();

				resourceMap.put("finish_tDBOutput_8", true);

				nb_line_deleted_tDBOutput_8 = nb_line_deleted_tDBOutput_8
						+ deletedCount_tDBOutput_8;
				nb_line_update_tDBOutput_8 = nb_line_update_tDBOutput_8
						+ updatedCount_tDBOutput_8;
				nb_line_inserted_tDBOutput_8 = nb_line_inserted_tDBOutput_8
						+ insertedCount_tDBOutput_8;
				nb_line_rejected_tDBOutput_8 = nb_line_rejected_tDBOutput_8
						+ rejectedCount_tDBOutput_8;

				globalMap.put("tDBOutput_8_NB_LINE", nb_line_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_8);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection(
								"categorias" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_8", true);
				end_Hash.put("tDBOutput_8", System.currentTimeMillis());

				/**
				 * [tDBOutput_8 end ] stop
				 */

				/**
				 * [tAdvancedHash_row5 end ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				tHash_Lookup_row5.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row5", true);
				end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_8 finally ] start
				 */

				currentComponent = "tDBInput_8";

				/**
				 * [tDBInput_8 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_8 finally ] start
				 */

				currentComponent = "tDBOutput_8";

				if (resourceMap.get("finish_tDBOutput_8") == null) {
					if (resourceMap.get("conn_tDBOutput_8") != null) {
						try {

							java.sql.Connection ctn_tDBOutput_8 = (java.sql.Connection) resourceMap
									.get("conn_tDBOutput_8");

							ctn_tDBOutput_8.close();

						} catch (java.sql.SQLException sqlEx_tDBOutput_8) {
							String errorMessage_tDBOutput_8 = "failed to close the connection in tDBOutput_8 :"
									+ sqlEx_tDBOutput_8.getMessage();

							System.err.println(errorMessage_tDBOutput_8);
						}
					}
				}

				/**
				 * [tDBOutput_8 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row5 finally ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				/**
				 * [tAdvancedHash_row5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}

	public static class productoStruct implements
			routines.system.IPersistableRow<productoStruct> {
		final static byte[] commonByteArrayLock_SSD_testing = new byte[0];
		static byte[] commonByteArray_SSD_testing = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idproducto;

		public int getIdproducto() {
			return this.idproducto;
		}

		public String nombreproducto;

		public String getNombreproducto() {
			return this.nombreproducto;
		}

		public int idproveedor;

		public int getIdproveedor() {
			return this.idproveedor;
		}

		public int idcategoria;

		public int getIdcategoria() {
			return this.idcategoria;
		}

		public String cantidadporunidad;

		public String getCantidadporunidad() {
			return this.cantidadporunidad;
		}

		public double precioporunidad;

		public double getPrecioporunidad() {
			return this.precioporunidad;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idproducto;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final productoStruct other = (productoStruct) obj;

			if (this.idproducto != other.idproducto)
				return false;

			return true;
		}

		public void copyDataTo(productoStruct other) {

			other.idproducto = this.idproducto;
			other.nombreproducto = this.nombreproducto;
			other.idproveedor = this.idproveedor;
			other.idcategoria = this.idcategoria;
			other.cantidadporunidad = this.cantidadporunidad;
			other.precioporunidad = this.precioporunidad;

		}

		public void copyKeysDataTo(productoStruct other) {

			other.idproducto = this.idproducto;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SSD_testing.length) {
					if (length < 1024
							&& commonByteArray_SSD_testing.length == 0) {
						commonByteArray_SSD_testing = new byte[1024];
					} else {
						commonByteArray_SSD_testing = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SSD_testing, 0, length);
				strReturn = new String(commonByteArray_SSD_testing, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSD_testing) {

				try {

					int length = 0;

					this.idproducto = dis.readInt();

					this.nombreproducto = readString(dis);

					this.idproveedor = dis.readInt();

					this.idcategoria = dis.readInt();

					this.cantidadporunidad = readString(dis);

					this.precioporunidad = dis.readDouble();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idproducto);

				// String

				writeString(this.nombreproducto, dos);

				// int

				dos.writeInt(this.idproveedor);

				// int

				dos.writeInt(this.idcategoria);

				// String

				writeString(this.cantidadporunidad, dos);

				// double

				dos.writeDouble(this.precioporunidad);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idproducto=" + String.valueOf(idproducto));
			sb.append(",nombreproducto=" + nombreproducto);
			sb.append(",idproveedor=" + String.valueOf(idproveedor));
			sb.append(",idcategoria=" + String.valueOf(idcategoria));
			sb.append(",cantidadporunidad=" + cantidadporunidad);
			sb.append(",precioporunidad=" + String.valueOf(precioporunidad));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(productoStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idproducto,
					other.idproducto);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_SSD_testing = new byte[0];
		static byte[] commonByteArray_SSD_testing = new byte[0];

		public Integer IDPRODUCTO;

		public Integer getIDPRODUCTO() {
			return this.IDPRODUCTO;
		}

		public String NOMBREPRODUCTO;

		public String getNOMBREPRODUCTO() {
			return this.NOMBREPRODUCTO;
		}

		public Integer IDPROVEEDOR;

		public Integer getIDPROVEEDOR() {
			return this.IDPROVEEDOR;
		}

		public Integer IDCATEGORIA;

		public Integer getIDCATEGORIA() {
			return this.IDCATEGORIA;
		}

		public String CANTIDADPORUNIDAD;

		public String getCANTIDADPORUNIDAD() {
			return this.CANTIDADPORUNIDAD;
		}

		public Double PRECIOUNIDAD;

		public Double getPRECIOUNIDAD() {
			return this.PRECIOUNIDAD;
		}

		public Short UNIDADESENEXISTENCIA;

		public Short getUNIDADESENEXISTENCIA() {
			return this.UNIDADESENEXISTENCIA;
		}

		public Short UNIDADESENPEDIDO;

		public Short getUNIDADESENPEDIDO() {
			return this.UNIDADESENPEDIDO;
		}

		public Long NIVELNUEVOPEDIDO;

		public Long getNIVELNUEVOPEDIDO() {
			return this.NIVELNUEVOPEDIDO;
		}

		public Boolean SUSPENDIDO;

		public Boolean getSUSPENDIDO() {
			return this.SUSPENDIDO;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SSD_testing.length) {
					if (length < 1024
							&& commonByteArray_SSD_testing.length == 0) {
						commonByteArray_SSD_testing = new byte[1024];
					} else {
						commonByteArray_SSD_testing = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SSD_testing, 0, length);
				strReturn = new String(commonByteArray_SSD_testing, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSD_testing) {

				try {

					int length = 0;

					this.IDPRODUCTO = readInteger(dis);

					this.NOMBREPRODUCTO = readString(dis);

					this.IDPROVEEDOR = readInteger(dis);

					this.IDCATEGORIA = readInteger(dis);

					this.CANTIDADPORUNIDAD = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.PRECIOUNIDAD = null;
					} else {
						this.PRECIOUNIDAD = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.UNIDADESENEXISTENCIA = null;
					} else {
						this.UNIDADESENEXISTENCIA = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.UNIDADESENPEDIDO = null;
					} else {
						this.UNIDADESENPEDIDO = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NIVELNUEVOPEDIDO = null;
					} else {
						this.NIVELNUEVOPEDIDO = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SUSPENDIDO = null;
					} else {
						this.SUSPENDIDO = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.IDPRODUCTO, dos);

				// String

				writeString(this.NOMBREPRODUCTO, dos);

				// Integer

				writeInteger(this.IDPROVEEDOR, dos);

				// Integer

				writeInteger(this.IDCATEGORIA, dos);

				// String

				writeString(this.CANTIDADPORUNIDAD, dos);

				// Double

				if (this.PRECIOUNIDAD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.PRECIOUNIDAD);
				}

				// Short

				if (this.UNIDADESENEXISTENCIA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.UNIDADESENEXISTENCIA);
				}

				// Short

				if (this.UNIDADESENPEDIDO == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.UNIDADESENPEDIDO);
				}

				// Long

				if (this.NIVELNUEVOPEDIDO == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.NIVELNUEVOPEDIDO);
				}

				// Boolean

				if (this.SUSPENDIDO == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.SUSPENDIDO);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IDPRODUCTO=" + String.valueOf(IDPRODUCTO));
			sb.append(",NOMBREPRODUCTO=" + NOMBREPRODUCTO);
			sb.append(",IDPROVEEDOR=" + String.valueOf(IDPROVEEDOR));
			sb.append(",IDCATEGORIA=" + String.valueOf(IDCATEGORIA));
			sb.append(",CANTIDADPORUNIDAD=" + CANTIDADPORUNIDAD);
			sb.append(",PRECIOUNIDAD=" + String.valueOf(PRECIOUNIDAD));
			sb.append(",UNIDADESENEXISTENCIA="
					+ String.valueOf(UNIDADESENEXISTENCIA));
			sb.append(",UNIDADESENPEDIDO=" + String.valueOf(UNIDADESENPEDIDO));
			sb.append(",NIVELNUEVOPEDIDO=" + String.valueOf(NIVELNUEVOPEDIDO));
			sb.append(",SUSPENDIDO=" + String.valueOf(SUSPENDIDO));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_11Struct implements
			routines.system.IPersistableRow<after_tDBInput_11Struct> {
		final static byte[] commonByteArrayLock_SSD_testing = new byte[0];
		static byte[] commonByteArray_SSD_testing = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer IDPRODUCTO;

		public Integer getIDPRODUCTO() {
			return this.IDPRODUCTO;
		}

		public String NOMBREPRODUCTO;

		public String getNOMBREPRODUCTO() {
			return this.NOMBREPRODUCTO;
		}

		public Integer IDPROVEEDOR;

		public Integer getIDPROVEEDOR() {
			return this.IDPROVEEDOR;
		}

		public Integer IDCATEGORIA;

		public Integer getIDCATEGORIA() {
			return this.IDCATEGORIA;
		}

		public String CANTIDADPORUNIDAD;

		public String getCANTIDADPORUNIDAD() {
			return this.CANTIDADPORUNIDAD;
		}

		public Double PRECIOUNIDAD;

		public Double getPRECIOUNIDAD() {
			return this.PRECIOUNIDAD;
		}

		public Short UNIDADESENEXISTENCIA;

		public Short getUNIDADESENEXISTENCIA() {
			return this.UNIDADESENEXISTENCIA;
		}

		public Short UNIDADESENPEDIDO;

		public Short getUNIDADESENPEDIDO() {
			return this.UNIDADESENPEDIDO;
		}

		public Long NIVELNUEVOPEDIDO;

		public Long getNIVELNUEVOPEDIDO() {
			return this.NIVELNUEVOPEDIDO;
		}

		public Boolean SUSPENDIDO;

		public Boolean getSUSPENDIDO() {
			return this.SUSPENDIDO;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.IDPRODUCTO == null) ? 0 : this.IDPRODUCTO
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tDBInput_11Struct other = (after_tDBInput_11Struct) obj;

			if (this.IDPRODUCTO == null) {
				if (other.IDPRODUCTO != null)
					return false;

			} else if (!this.IDPRODUCTO.equals(other.IDPRODUCTO))

				return false;

			return true;
		}

		public void copyDataTo(after_tDBInput_11Struct other) {

			other.IDPRODUCTO = this.IDPRODUCTO;
			other.NOMBREPRODUCTO = this.NOMBREPRODUCTO;
			other.IDPROVEEDOR = this.IDPROVEEDOR;
			other.IDCATEGORIA = this.IDCATEGORIA;
			other.CANTIDADPORUNIDAD = this.CANTIDADPORUNIDAD;
			other.PRECIOUNIDAD = this.PRECIOUNIDAD;
			other.UNIDADESENEXISTENCIA = this.UNIDADESENEXISTENCIA;
			other.UNIDADESENPEDIDO = this.UNIDADESENPEDIDO;
			other.NIVELNUEVOPEDIDO = this.NIVELNUEVOPEDIDO;
			other.SUSPENDIDO = this.SUSPENDIDO;

		}

		public void copyKeysDataTo(after_tDBInput_11Struct other) {

			other.IDPRODUCTO = this.IDPRODUCTO;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SSD_testing.length) {
					if (length < 1024
							&& commonByteArray_SSD_testing.length == 0) {
						commonByteArray_SSD_testing = new byte[1024];
					} else {
						commonByteArray_SSD_testing = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SSD_testing, 0, length);
				strReturn = new String(commonByteArray_SSD_testing, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSD_testing) {

				try {

					int length = 0;

					this.IDPRODUCTO = readInteger(dis);

					this.NOMBREPRODUCTO = readString(dis);

					this.IDPROVEEDOR = readInteger(dis);

					this.IDCATEGORIA = readInteger(dis);

					this.CANTIDADPORUNIDAD = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.PRECIOUNIDAD = null;
					} else {
						this.PRECIOUNIDAD = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.UNIDADESENEXISTENCIA = null;
					} else {
						this.UNIDADESENEXISTENCIA = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.UNIDADESENPEDIDO = null;
					} else {
						this.UNIDADESENPEDIDO = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NIVELNUEVOPEDIDO = null;
					} else {
						this.NIVELNUEVOPEDIDO = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SUSPENDIDO = null;
					} else {
						this.SUSPENDIDO = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.IDPRODUCTO, dos);

				// String

				writeString(this.NOMBREPRODUCTO, dos);

				// Integer

				writeInteger(this.IDPROVEEDOR, dos);

				// Integer

				writeInteger(this.IDCATEGORIA, dos);

				// String

				writeString(this.CANTIDADPORUNIDAD, dos);

				// Double

				if (this.PRECIOUNIDAD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.PRECIOUNIDAD);
				}

				// Short

				if (this.UNIDADESENEXISTENCIA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.UNIDADESENEXISTENCIA);
				}

				// Short

				if (this.UNIDADESENPEDIDO == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.UNIDADESENPEDIDO);
				}

				// Long

				if (this.NIVELNUEVOPEDIDO == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.NIVELNUEVOPEDIDO);
				}

				// Boolean

				if (this.SUSPENDIDO == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.SUSPENDIDO);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IDPRODUCTO=" + String.valueOf(IDPRODUCTO));
			sb.append(",NOMBREPRODUCTO=" + NOMBREPRODUCTO);
			sb.append(",IDPROVEEDOR=" + String.valueOf(IDPROVEEDOR));
			sb.append(",IDCATEGORIA=" + String.valueOf(IDCATEGORIA));
			sb.append(",CANTIDADPORUNIDAD=" + CANTIDADPORUNIDAD);
			sb.append(",PRECIOUNIDAD=" + String.valueOf(PRECIOUNIDAD));
			sb.append(",UNIDADESENEXISTENCIA="
					+ String.valueOf(UNIDADESENEXISTENCIA));
			sb.append(",UNIDADESENPEDIDO=" + String.valueOf(UNIDADESENPEDIDO));
			sb.append(",NIVELNUEVOPEDIDO=" + String.valueOf(NIVELNUEVOPEDIDO));
			sb.append(",SUSPENDIDO=" + String.valueOf(SUSPENDIDO));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_11Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.IDPRODUCTO,
					other.IDPRODUCTO);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_11Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_3Process(globalMap);
				tDBInput_8Process(globalMap);

				row4Struct row4 = new row4Struct();
				productoStruct producto = new productoStruct();

				/**
				 * [tDBOutput_11 begin ] start
				 */

				ok_Hash.put("tDBOutput_11", false);
				start_Hash.put("tDBOutput_11", System.currentTimeMillis());

				currentComponent = "tDBOutput_11";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("producto" + iterateId,
								0, 0);

					}
				}

				int tos_count_tDBOutput_11 = 0;

				class BytesLimit65535_tDBOutput_11 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBOutput_11().limitLog4jByte();

				int nb_line_tDBOutput_11 = 0;
				int nb_line_update_tDBOutput_11 = 0;
				int nb_line_inserted_tDBOutput_11 = 0;
				int nb_line_deleted_tDBOutput_11 = 0;
				int nb_line_rejected_tDBOutput_11 = 0;

				int deletedCount_tDBOutput_11 = 0;
				int updatedCount_tDBOutput_11 = 0;
				int insertedCount_tDBOutput_11 = 0;

				int rejectedCount_tDBOutput_11 = 0;

				String tableName_tDBOutput_11 = "producto";
				boolean whetherReject_tDBOutput_11 = false;

				java.util.Calendar calendar_tDBOutput_11 = java.util.Calendar
						.getInstance();
				calendar_tDBOutput_11.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_11 = calendar_tDBOutput_11.getTime()
						.getTime();
				calendar_tDBOutput_11.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_11 = calendar_tDBOutput_11.getTime()
						.getTime();
				long date_tDBOutput_11;

				java.sql.Connection conn_tDBOutput_11 = null;
				String dbProperties_tDBOutput_11 = "noDatetimeStringSync=true";
				String url_tDBOutput_11 = null;
				if (dbProperties_tDBOutput_11 == null
						|| dbProperties_tDBOutput_11.trim().length() == 0) {
					url_tDBOutput_11 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "ssd" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_11 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_11
							.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_11 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_11 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "ssd" + "?"
							+ properties_tDBOutput_11;
				}
				String driverClass_tDBOutput_11 = "org.gjt.mm.mysql.Driver";

				String dbUser_tDBOutput_11 = "root";

				final String decryptedPassword_tDBOutput_11 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");

				String dbPwd_tDBOutput_11 = decryptedPassword_tDBOutput_11;
				java.lang.Class.forName(driverClass_tDBOutput_11);

				conn_tDBOutput_11 = java.sql.DriverManager.getConnection(
						url_tDBOutput_11, dbUser_tDBOutput_11,
						dbPwd_tDBOutput_11);

				resourceMap.put("conn_tDBOutput_11", conn_tDBOutput_11);
				conn_tDBOutput_11.setAutoCommit(false);
				int commitEvery_tDBOutput_11 = 10000;
				int commitCounter_tDBOutput_11 = 0;

				int count_tDBOutput_11 = 0;

				String insert_tDBOutput_11 = "INSERT INTO `"
						+ "producto"
						+ "` (`idproducto`,`nombreproducto`,`idproveedor`,`idcategoria`,`cantidadporunidad`,`precioporunidad`) VALUES (?,?,?,?,?,?)";
				int batchSize_tDBOutput_11 = 100;
				int batchSizeCounter_tDBOutput_11 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_11 = conn_tDBOutput_11
						.prepareStatement(insert_tDBOutput_11);

				/**
				 * [tDBOutput_11 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_3 = 0;

				class BytesLimit65535_tMap_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_3().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) globalMap
						.get("tHash_Lookup_row5"));

				row5Struct row5HashKey = new row5Struct();
				row5Struct row5Default = new row5Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) globalMap
						.get("tHash_Lookup_row6"));

				row6Struct row6HashKey = new row6Struct();
				row6Struct row6Default = new row6Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				productoStruct producto_tmp = new productoStruct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tDBInput_11 begin ] start
				 */

				ok_Hash.put("tDBInput_11", false);
				start_Hash.put("tDBInput_11", System.currentTimeMillis());

				currentComponent = "tDBInput_11";

				int tos_count_tDBInput_11 = 0;

				class BytesLimit65535_tDBInput_11 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_11().limitLog4jByte();

				int nb_line_tDBInput_11 = 0;
				java.sql.Connection conn_tDBInput_11 = null;
				String driverClass_tDBInput_11 = "net.ucanaccess.jdbc.UcanaccessDriver";
				java.lang.Class.forName(driverClass_tDBInput_11);

				String url_tDBInput_11 = "jdbc:ucanaccess://"
						+ "/Users/tomasmalio/Desktop/SSD/TP_Integrador_Enunciado_y_Bases/Neptuno.mdb"
						+ ";jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;singleConnection=true";
				String dbUser_tDBInput_11 = "";

				final String decryptedPassword_tDBInput_11 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");

				String dbPwd_tDBInput_11 = decryptedPassword_tDBInput_11;

				String atnParams_tDBInput_11 = "jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;memory=false";
				atnParams_tDBInput_11 = atnParams_tDBInput_11.replaceAll("&",
						"\n");
				java.util.Properties atnParamsPrope_tDBInput_11 = new java.util.Properties();
				atnParamsPrope_tDBInput_11.put("user", dbUser_tDBInput_11);
				atnParamsPrope_tDBInput_11.put("password", dbPwd_tDBInput_11);
				atnParamsPrope_tDBInput_11
						.load(new java.io.ByteArrayInputStream(
								atnParams_tDBInput_11.getBytes()));
				conn_tDBInput_11 = java.sql.DriverManager.getConnection(
						url_tDBInput_11, atnParamsPrope_tDBInput_11);

				java.sql.Statement stmt_tDBInput_11 = conn_tDBInput_11
						.createStatement();

				String dbquery_tDBInput_11 = "SELECT \n  PRODUCTOS.IDPRODUCTO, \n  PRODUCTOS.NOMBREPRODUCTO, \n  PRODUCTOS.IDPROVEEDOR, \n  PRODUCTOS.[IDCATEGORÍA], \n  P"
						+ "RODUCTOS.CANTIDADPORUNIDAD, \n  PRODUCTOS.PRECIOUNIDAD, \n  PRODUCTOS.UNIDADESENEXISTENCIA, \n  PRODUCTOS.UNIDADESENPEDIDO,"
						+ " \n  PRODUCTOS.NIVELNUEVOPEDIDO, \n  PRODUCTOS.SUSPENDIDO\nFROM PRODUCTOS";

				globalMap.put("tDBInput_11_QUERY", dbquery_tDBInput_11);
				java.sql.ResultSet rs_tDBInput_11 = null;

				try {
					rs_tDBInput_11 = stmt_tDBInput_11
							.executeQuery(dbquery_tDBInput_11);
					java.sql.ResultSetMetaData rsmd_tDBInput_11 = rs_tDBInput_11
							.getMetaData();
					int colQtyInRs_tDBInput_11 = rsmd_tDBInput_11
							.getColumnCount();

					String tmpContent_tDBInput_11 = null;

					while (rs_tDBInput_11.next()) {
						nb_line_tDBInput_11++;

						if (colQtyInRs_tDBInput_11 < 1) {
							row4.IDPRODUCTO = null;
						} else {

							if (rs_tDBInput_11.getObject(1) != null) {
								row4.IDPRODUCTO = rs_tDBInput_11.getInt(1);
							} else {
								row4.IDPRODUCTO = null;
							}
						}
						if (colQtyInRs_tDBInput_11 < 2) {
							row4.NOMBREPRODUCTO = null;
						} else {

							row4.NOMBREPRODUCTO = routines.system.JDBCUtil
									.getString(rs_tDBInput_11, 2, false);
						}
						if (colQtyInRs_tDBInput_11 < 3) {
							row4.IDPROVEEDOR = null;
						} else {

							if (rs_tDBInput_11.getObject(3) != null) {
								row4.IDPROVEEDOR = rs_tDBInput_11.getInt(3);
							} else {
								row4.IDPROVEEDOR = null;
							}
						}
						if (colQtyInRs_tDBInput_11 < 4) {
							row4.IDCATEGORIA = null;
						} else {

							if (rs_tDBInput_11.getObject(4) != null) {
								row4.IDCATEGORIA = rs_tDBInput_11.getInt(4);
							} else {
								row4.IDCATEGORIA = null;
							}
						}
						if (colQtyInRs_tDBInput_11 < 5) {
							row4.CANTIDADPORUNIDAD = null;
						} else {

							row4.CANTIDADPORUNIDAD = routines.system.JDBCUtil
									.getString(rs_tDBInput_11, 5, false);
						}
						if (colQtyInRs_tDBInput_11 < 6) {
							row4.PRECIOUNIDAD = null;
						} else {

							if (rs_tDBInput_11.getObject(6) != null) {
								row4.PRECIOUNIDAD = rs_tDBInput_11.getDouble(6);
							} else {
								row4.PRECIOUNIDAD = null;
							}
						}
						if (colQtyInRs_tDBInput_11 < 7) {
							row4.UNIDADESENEXISTENCIA = null;
						} else {

							if (rs_tDBInput_11.getObject(7) != null) {
								row4.UNIDADESENEXISTENCIA = rs_tDBInput_11
										.getShort(7);
							} else {
								row4.UNIDADESENEXISTENCIA = null;
							}
						}
						if (colQtyInRs_tDBInput_11 < 8) {
							row4.UNIDADESENPEDIDO = null;
						} else {

							if (rs_tDBInput_11.getObject(8) != null) {
								row4.UNIDADESENPEDIDO = rs_tDBInput_11
										.getShort(8);
							} else {
								row4.UNIDADESENPEDIDO = null;
							}
						}
						if (colQtyInRs_tDBInput_11 < 9) {
							row4.NIVELNUEVOPEDIDO = null;
						} else {

							if (rs_tDBInput_11.getObject(9) != null) {
								row4.NIVELNUEVOPEDIDO = rs_tDBInput_11
										.getLong(9);
							} else {
								row4.NIVELNUEVOPEDIDO = null;
							}
						}
						if (colQtyInRs_tDBInput_11 < 10) {
							row4.SUSPENDIDO = null;
						} else {

							if (rs_tDBInput_11.getObject(10) != null) {
								row4.SUSPENDIDO = rs_tDBInput_11.getBoolean(10);
							} else {
								row4.SUSPENDIDO = null;
							}
						}

						/**
						 * [tDBInput_11 begin ] stop
						 */

						/**
						 * [tDBInput_11 main ] start
						 */

						currentComponent = "tDBInput_11";

						tos_count_tDBInput_11++;

						/**
						 * [tDBInput_11 main ] stop
						 */

						/**
						 * [tDBInput_11 process_data_begin ] start
						 */

						currentComponent = "tDBInput_11";

						/**
						 * [tDBInput_11 process_data_begin ] stop
						 */

						/**
						 * [tMap_3 main ] start
						 */

						currentComponent = "tMap_3";

						// row4
						// row4

						if (execStat) {
							runStat.updateStatOnConnection("row4" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_3 = false;
						boolean mainRowRejected_tMap_3 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row5"
						// /////////////////////////////////////////////

						boolean forceLooprow5 = false;

						row5Struct row5ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_3 = false;

							Object exprKeyValue_row5__idcategoria = row4.IDCATEGORIA;
							if (exprKeyValue_row5__idcategoria == null) {
								hasCasePrimitiveKeyWithNull_tMap_3 = true;
							} else {
								row5HashKey.idcategoria = (int) (Integer) exprKeyValue_row5__idcategoria;
							}

							row5HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_3) { // G_TM_M_091

								tHash_Lookup_row5.lookup(row5HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row5 != null
								&& tHash_Lookup_row5.getCount(row5HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row5' and it contains more one result from keys :  row5.idcategoria = '"
							// + row5HashKey.idcategoria + "'");
						} // G 071

						row5Struct row5 = null;

						row5Struct fromLookup_row5 = null;
						row5 = row5Default;

						if (tHash_Lookup_row5 != null
								&& tHash_Lookup_row5.hasNext()) { // G 099

							fromLookup_row5 = tHash_Lookup_row5.next();

						} // G 099

						if (fromLookup_row5 != null) {
							row5 = fromLookup_row5;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row6"
						// /////////////////////////////////////////////

						boolean forceLooprow6 = false;

						row6Struct row6ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_3 = false;

							Object exprKeyValue_row6__idproveedor = row4.IDPROVEEDOR;
							if (exprKeyValue_row6__idproveedor == null) {
								hasCasePrimitiveKeyWithNull_tMap_3 = true;
							} else {
								row6HashKey.idproveedor = (int) (Integer) exprKeyValue_row6__idproveedor;
							}

							row6HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_3) { // G_TM_M_091

								tHash_Lookup_row6.lookup(row6HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row6 != null
								&& tHash_Lookup_row6.getCount(row6HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row6' and it contains more one result from keys :  row6.idproveedor = '"
							// + row6HashKey.idproveedor + "'");
						} // G 071

						row6Struct row6 = null;

						row6Struct fromLookup_row6 = null;
						row6 = row6Default;

						if (tHash_Lookup_row6 != null
								&& tHash_Lookup_row6.hasNext()) { // G 099

							fromLookup_row6 = tHash_Lookup_row6.next();

						} // G 099

						if (fromLookup_row6 != null) {
							row6 = fromLookup_row6;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
							// ###############################
							// # Output tables

							producto = null;

							// # Output table : 'producto'
							producto_tmp.idproducto = row4.IDPRODUCTO;
							producto_tmp.nombreproducto = row4.NOMBREPRODUCTO;
							producto_tmp.idproveedor = row6.idproveedor;
							producto_tmp.idcategoria = row5.idcategoria;
							producto_tmp.cantidadporunidad = row4.CANTIDADPORUNIDAD;
							producto_tmp.precioporunidad = row4.PRECIOUNIDAD;
							producto = producto_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_3 = false;

						tos_count_tMap_3++;

						/**
						 * [tMap_3 main ] stop
						 */

						/**
						 * [tMap_3 process_data_begin ] start
						 */

						currentComponent = "tMap_3";

						/**
						 * [tMap_3 process_data_begin ] stop
						 */
						// Start of branch "producto"
						if (producto != null) {

							/**
							 * [tDBOutput_11 main ] start
							 */

							currentComponent = "tDBOutput_11";

							// producto
							// producto

							if (execStat) {
								runStat.updateStatOnConnection("producto"
										+ iterateId, 1, 1);
							}

							whetherReject_tDBOutput_11 = false;
							pstmt_tDBOutput_11.setInt(1, producto.idproducto);

							if (producto.nombreproducto == null) {
								pstmt_tDBOutput_11.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_11.setString(2,
										producto.nombreproducto);
							}

							pstmt_tDBOutput_11.setInt(3, producto.idproveedor);

							pstmt_tDBOutput_11.setInt(4, producto.idcategoria);

							if (producto.cantidadporunidad == null) {
								pstmt_tDBOutput_11.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_11.setString(5,
										producto.cantidadporunidad);
							}

							pstmt_tDBOutput_11.setDouble(6,
									producto.precioporunidad);

							pstmt_tDBOutput_11.addBatch();
							nb_line_tDBOutput_11++;

							batchSizeCounter_tDBOutput_11++;
							if (batchSize_tDBOutput_11 <= batchSizeCounter_tDBOutput_11) {
								try {
									int countSum_tDBOutput_11 = 0;
									for (int countEach_tDBOutput_11 : pstmt_tDBOutput_11
											.executeBatch()) {
										countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0
												: 1);
									}
									insertedCount_tDBOutput_11 += countSum_tDBOutput_11;
								} catch (java.sql.BatchUpdateException e) {
									int countSum_tDBOutput_11 = 0;
									for (int countEach_tDBOutput_11 : e
											.getUpdateCounts()) {
										countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0
												: countEach_tDBOutput_11);
									}
									insertedCount_tDBOutput_11 += countSum_tDBOutput_11;
									System.err.println(e.getMessage());
								}

								batchSizeCounter_tDBOutput_11 = 0;
							}
							commitCounter_tDBOutput_11++;

							if (commitEvery_tDBOutput_11 <= commitCounter_tDBOutput_11) {

								try {
									int countSum_tDBOutput_11 = 0;
									for (int countEach_tDBOutput_11 : pstmt_tDBOutput_11
											.executeBatch()) {
										countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0
												: 1);
									}
									insertedCount_tDBOutput_11 += countSum_tDBOutput_11;
								} catch (java.sql.BatchUpdateException e) {
									int countSum_tDBOutput_11 = 0;
									for (int countEach_tDBOutput_11 : e
											.getUpdateCounts()) {
										countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0
												: countEach_tDBOutput_11);
									}
									insertedCount_tDBOutput_11 += countSum_tDBOutput_11;
									System.err.println(e.getMessage());

								}
								conn_tDBOutput_11.commit();
								commitCounter_tDBOutput_11 = 0;

							}

							tos_count_tDBOutput_11++;

							/**
							 * [tDBOutput_11 main ] stop
							 */

							/**
							 * [tDBOutput_11 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_11";

							/**
							 * [tDBOutput_11 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_11 process_data_end ] start
							 */

							currentComponent = "tDBOutput_11";

							/**
							 * [tDBOutput_11 process_data_end ] stop
							 */

						} // End of branch "producto"

						/**
						 * [tMap_3 process_data_end ] start
						 */

						currentComponent = "tMap_3";

						/**
						 * [tMap_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_11 process_data_end ] start
						 */

						currentComponent = "tDBInput_11";

						/**
						 * [tDBInput_11 process_data_end ] stop
						 */

						/**
						 * [tDBInput_11 end ] start
						 */

						currentComponent = "tDBInput_11";

					}
				} finally {
					stmt_tDBInput_11.close();

					if (conn_tDBInput_11 != null
							&& !conn_tDBInput_11.isClosed()) {

						conn_tDBInput_11.close();

					}
				}
				globalMap.put("tDBInput_11_NB_LINE", nb_line_tDBInput_11);

				ok_Hash.put("tDBInput_11", true);
				end_Hash.put("tDBInput_11", System.currentTimeMillis());

				/**
				 * [tDBInput_11 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row5 != null) {
					tHash_Lookup_row5.endGet();
				}
				globalMap.remove("tHash_Lookup_row5");

				if (tHash_Lookup_row6 != null) {
					tHash_Lookup_row6.endGet();
				}
				globalMap.remove("tHash_Lookup_row6");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tDBOutput_11 end ] start
				 */

				currentComponent = "tDBOutput_11";

				try {
					if (batchSizeCounter_tDBOutput_11 != 0) {
						int countSum_tDBOutput_11 = 0;

						for (int countEach_tDBOutput_11 : pstmt_tDBOutput_11
								.executeBatch()) {
							countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0
									: 1);
						}

						insertedCount_tDBOutput_11 += countSum_tDBOutput_11;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_11 = 0;
					for (int countEach_tDBOutput_11 : e.getUpdateCounts()) {
						countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0
								: countEach_tDBOutput_11);
					}

					insertedCount_tDBOutput_11 += countSum_tDBOutput_11;

					globalMap.put(currentComponent + "_ERROR_MESSAGE",
							e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_11 = 0;

				if (pstmt_tDBOutput_11 != null) {

					pstmt_tDBOutput_11.close();

				}

				if (commitCounter_tDBOutput_11 > 0) {

					conn_tDBOutput_11.commit();

				}

				conn_tDBOutput_11.close();

				resourceMap.put("finish_tDBOutput_11", true);

				nb_line_deleted_tDBOutput_11 = nb_line_deleted_tDBOutput_11
						+ deletedCount_tDBOutput_11;
				nb_line_update_tDBOutput_11 = nb_line_update_tDBOutput_11
						+ updatedCount_tDBOutput_11;
				nb_line_inserted_tDBOutput_11 = nb_line_inserted_tDBOutput_11
						+ insertedCount_tDBOutput_11;
				nb_line_rejected_tDBOutput_11 = nb_line_rejected_tDBOutput_11
						+ rejectedCount_tDBOutput_11;

				globalMap.put("tDBOutput_11_NB_LINE", nb_line_tDBOutput_11);
				globalMap.put("tDBOutput_11_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_11);
				globalMap.put("tDBOutput_11_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_11);
				globalMap.put("tDBOutput_11_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_11);
				globalMap.put("tDBOutput_11_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_11);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("producto" + iterateId,
								2, 0);
					}
				}

				ok_Hash.put("tDBOutput_11", true);
				end_Hash.put("tDBOutput_11", System.currentTimeMillis());

				/**
				 * [tDBOutput_11 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row6");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row5");

			try {

				/**
				 * [tDBInput_11 finally ] start
				 */

				currentComponent = "tDBInput_11";

				/**
				 * [tDBInput_11 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tDBOutput_11 finally ] start
				 */

				currentComponent = "tDBOutput_11";

				if (resourceMap.get("finish_tDBOutput_11") == null) {
					if (resourceMap.get("conn_tDBOutput_11") != null) {
						try {

							java.sql.Connection ctn_tDBOutput_11 = (java.sql.Connection) resourceMap
									.get("conn_tDBOutput_11");

							ctn_tDBOutput_11.close();

						} catch (java.sql.SQLException sqlEx_tDBOutput_11) {
							String errorMessage_tDBOutput_11 = "failed to close the connection in tDBOutput_11 :"
									+ sqlEx_tDBOutput_11.getMessage();

							System.err.println(errorMessage_tDBOutput_11);
						}
					}
				}

				/**
				 * [tDBOutput_11 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final testing testingClass = new testing();

		int exitCode = testingClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = testing.class.getClassLoader()
					.getResourceAsStream(
							"ssd/testing_0_1/contexts/" + contextStr
									+ ".properties");
			if (inContext == null) {
				inContext = testing.class.getClassLoader().getResourceAsStream(
						"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_11Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_11) {
			globalMap.put("tDBInput_11_SUBPROCESS_STATE", -1);

			e_tDBInput_11.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : testing");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 189025 characters generated by Talend Open Studio for Data Integration on the
 * 1 de junio de 2018 0:49:12 ART
 ************************************************************************************************/
